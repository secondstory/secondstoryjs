/**
 * @class Solitaire.Game
 * @extends Ext.util.Observable
 * Represents a single Game of Solitaire, tracks the cards and detects game completion
 */
Solitaire.Game = Ext.extend(Ext.util.Observable, {
    constructor: function(config) {
        Solitaire.Game.superclass.constructor.call(this, config);
        
        /**
         * @property cards
         * @type Ext.util.MixedCollection
         * Stores all of the Cards in this Deck
         */
        this.cards = new Ext.util.MixedCollection();
        
        this.createCards();
    },
    
    /**
     * @private
     * Moves all cards to their initial positions
     */
    distributeCards: function() {
        
    },
    
    /**
     * Returns the completion status of this game
     * @return {Boolean} True if all cards have been placed onto their suit stacks
     */
    isComplete: function() {
        
    },
    
    /**
     * @private
     * Used to serialize game state so that it can be saved and resumed later
     * @return {Object} A serializable object representing the current state of the game and location of each card
     */
    getState: function() {
        
    },
    
    /**
     * @private
     * Applys a state object as generated by {@link getState}, updating the score and moving the cards to the correct positions
     * @param {Object} state The state object
     */
    applyState: function(state) {
        
    },
    
    /**
     * @private
     * Creates an instance of each card in a standard deck
     */
    createCards: function() {
        var suits  = Solitaire.Card.SUITS,
            values = Solitaire.Card.VALUES,
            slen   = suits.length,
            vlen   = values.length,
            i, j;
        
        for (i = 0; i < slen; i++) {
            for (j = 0; j < vlen; j++) {
                this.cards.add(new Solitaire.Card({
                    suit : suits[i],
                    value: values[j]
                }));
            }
        }
        
        this.shuffle();
        this.shuffle();
    },
    
    /**
     * Shuffles the pack the specified number of times
     */
    shuffle: function() {
        var cards = this.cards.items,
            count = cards.length,
            order = {},
            i, j;
        
        //here we construct and array of indexes and sort it randomly, before passing this off to MixedCollection's reorder
        var arr = [];
        for (i = 0; i < count; i++) {
            arr.push(i);
        }
        
        arr.sort(function() {
            return Math.round(Math.random())-0.5;
        });
        
        for (j = 0; j < count; j++) {
            order[j] = arr[j];
        }
        
        this.cards.suspendEvents(true);
        this.cards.reorder(order);
        this.cards.resumeEvents(true);
    }
    
});